// -----------------------------------------------------------------------------
// This file contains all Sass mixins.
// -----------------------------------------------------------------------------

/**
 * Event wrapper
 * @author Harry Roberts
 * @param {Bool} $self [false] - Whether or not to include current selector
 */
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/**
 * Conversion px to rem
 * @author Greg Rickaby
 */
@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	$root: 10; // Based on HTML reset html { font-size: 62.5%; }

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}

		@else if type-of($value) == number {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == "px" {
				$px : append($px,  $value);
				$rem: append($rem, ($val / $root + rem));
			}

			@if $unit == "rem" {
				$px : append($px,  ($val * $root + px));
				$rem: append($rem, $value);
			}
		}

		@else {
			$px : append($px,  $value);
			$rem: append($rem, $value);
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

/**
 * Map repeater
 * @author Cesar Level
 * @param $class: Class name
 * @param $property: CSS Property
 * @param $map: Map of values
 * @param $args: CSS arguments including a map
 * @param $important: Boolean
 * @param $rem: Boolean
 * @include repeater(inset, padding, $spaces, ($spaces 0), $rem: false);
 */
@mixin map-repeater($class, $property, $map, $args: null, $important: false, $rem: false){
    $imp: if($important, !important, '');
    $argsMapIndex: 0;
    @if ($args != null) {
        // Finding index of map in arguments
        @each $item in $args {
            @if (type-of($item) == 'map') {
                $argsMapIndex: index($args, $item);
            }
        }
        @each $key, $value in nth($args, $argsMapIndex) {
            $listValues: set-nth($args, $argsMapIndex, $value);
            @if ($rem) {
                .#{$class}-#{$key} {
                    @include rem($property, append($listValues, #{$imp}));
                };
            } @else {
                .#{$class}-#{$key} {
                    #{$property}: #{$listValues}#{$imp}
                };
            }

        }
    } @else {
        @each $key, $value in $map {
            @if ($rem) {
                .#{$class}-#{$key} {
                    @include rem($property, append($value, #{$imp}));
                };
            } @else {
                .#{$class}-#{$key} {#{$property}: #{$value}#{$imp}};
            }
        }
    }
}

/**
 * Breakpoints
 * @author Cesar Level
 */
@mixin media-query-breakpoint($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

/**
 * Truncate
 * @author Cesar Level
 */
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
