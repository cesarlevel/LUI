// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/**
* Clear inner floats
*/
.clearfix::after {
    clear: both;
    content: '';
    display: table;
}

/**
* floats
*/
.float-left { float: left!important; }
.float-right { float: right!important; }
.float-none { float: none!important; }

/**
* Hide element while making it readable for screen readers
* Shamelessly borrowed from HTML5Boilerplate:
* https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
*/
.visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/**
* Text variations
*/
.t-italic { font-style: italic!important; }
.t-lowercase { text-transform: lowercase!important; }
.t-titlecase { text-transform: capitalize!important; }
.t-uppercase { text-transform: uppercase!important; }

/**
* Text decoration
*/
.t-overline { text-decoration: overline!important; }
.t-line-through { text-decoration: line-through!important; }
.t-underline { text-decoration: underline!important; }
.t-no-decoration { text-decoration: none!important; }

/**
* Hide text while making it readable for screen readers
* 1. Needed in WebKit-based browsers because of an implementation bug;
*    See: https://code.google.com/p/chromium/issues/detail?id=457146
*/
.t-hide {
    overflow: hidden;
    padding: 0; /* 1 */
    text-indent: 101%;
    white-space: nowrap;
}

/**
* Text wrapping / space
*/
.t-break-all { word-break: break-all!important; }
.t-keep-all { word-break: keep-all!important; }
.t-break-word { word-wrap: break-word!important; }
.t-no-wrap { white-space: nowrap!important; }
.t-pre { white-space: pre!important; }
.t-pre-wrap { white-space: pre-wrap!important; }
.t-pre-line { white-space: pre-line!important; }
@include map-repeater(t-indent, text-indent, $spaces, $important: false, $rem: true);

/**
* Text overflow
*/
.t-elipsis { text-overflow: ellipsis!important; }

/**
* Text aligment
*/
.tr { text-align: right!important; }
.tl { text-align: left!important; }
.tc { text-align: center!important; }
.tj { text-align: justify!important; }

/**
* Text truncated
*/
.t-truncate {
    @include truncate(100px!important);
}

/**
* Spacing
*/

// Inset
@include map-repeater(inset, padding, $spaces, $important: false, $rem: true);

// Stack
@include map-repeater(stack, margin, $spaces, ($spaces 0 0 0), $important: false, $rem: true);

// Inline
@include map-repeater(inline, margin, $spaces, (0 $spaces 0 0 ), $important: false, $rem: true);

// Margin
@include map-repeater(mt, margin-top, $spaces, $important: true, $rem: true);
@include map-repeater(mr, margin-right, $spaces, $important: true, $rem: true);
@include map-repeater(mb, margin-bottom, $spaces, $important: true, $rem: true);
@include map-repeater(ml, margin-left, $spaces, $important: true, $rem: true);

// Padding
@include map-repeater(pt, padding-top, $spaces, $important: true, $rem: true);
@include map-repeater(pr, padding-right, $spaces, $important: true, $rem: true);
@include map-repeater(pb, padding-bottom, $spaces, $important: true, $rem: true);
@include map-repeater(pl, padding-left, $spaces, $important: true, $rem: true);

// Position
@include map-repeater(top, top, $spaces, $important: true, $rem: true);
@include map-repeater(right, right, $spaces, $important: true, $rem: true);
@include map-repeater(bottom, bottom, $spaces, $important: true, $rem: true);
@include map-repeater(left, left, $spaces, $important: true, $rem: true);


/**
* Flex Helpers
*/
.display-flex {
    @include display-flex($important: true);
}

.display-inline-flex {
    @include display-inline-flex($important: true);
}

.no-flex {
    width: auto;
    @include flex(0 0 auto!important);
}

.align-items-center {
    @include align-items(center, $important: true);
}

.justify-content-end {
    @include justify-content(flex-end, $important: true);
}

/**
* Media queries
*/
.hide-on-phone {
    @include media-query-breakpoint('phone', $type: max) {
        display: none;
    }
}

.hide-on-tablet {
    @include media-query-breakpoint('tablet', $type: max) {
        display: none;
    }
}

.hide-on-small-desktop {
    @include media-query-breakpoint('small-desktop', $type: max) {
        display: none;
    }
}

.hide-on-desktop {
    @include media-query-breakpoint('desktop', $type: max) {
        display: none;
    }
}

.hide-on-large-desktop {
    @include media-query-breakpoint('large-desktop', $type: max) {
        display: none;
    }
}

.show-on-phone {
    @include media-query-breakpoint('phone', $type: max) {
        display: block;
    }
}

.show-on-tablet {
    @include media-query-breakpoint('large-desktop', $type: min) {
        display: none;
    }
    @include media-query-breakpoint('large-desktop', $type: max) {
        display: none;
    }
    @include media-query-breakpoint('tablet', $type: max) {
        display: block;
    }
}

.show-on-small-desktop {
    @include media-query-breakpoint('large-desktop', $type: min) {
        display: none;
    }
    @include media-query-breakpoint('large-desktop', $type: max) {
        display: none;
    }
    @include media-query-breakpoint('small-desktop', $type: max) {
        display: block;
    }
}

.show-on-desktop {
    @include media-query-breakpoint('large-desktop', $type: min) {
        display: none;
    }
    @include media-query-breakpoint('large-desktop', $type: max) {
        display: none;
    }
    @include media-query-breakpoint('desktop', $type: max) {
        display: block;
    }
}

.show-on-large-desktop {
    @include media-query-breakpoint('large-desktop', $type: max) {
        display: block;
    }
}

.equal-widths-elements-mobile {
    @include media-query-breakpoint('tablet', $type: max) {
        @include display-flex;
        @include flex-wrap(nowrap);
        @include justify-content(flex-start);
    }

    & > * {
        @include flex(1 0);
    }
}

/**
* Object Aligment
* These classes force text alignment for desired element (and for its inner
* elements) by assigning text-align CSS property.
*/
.align-left { text-align: left!important; }
.align-right { text-align: right!important; }
.align-center { text-align: center!important; }
.align-justify { text-align: justify!important; }

/**
* Z-Index
*/
@include map-repeater(z, z-index, $zIndex, $important: true, $rem: false);
